from Crypto.Util.number import *
import gmpy2
# 给定参数
n1 = 14432666153227097246966473779398498322446362470477856518302160727275228440533078197160214960264694728037789676055508808662531215032017275930759989019477479592263093851424766867352928045348245187377854478694473966351199340104767547142704804646104435123168643805747110722266925650936084942101755786096341534135450181184992374618357334520655034185320462940540657372371015032360082892556020184069239474651180497662707917915932372979159948658777237210725562796698513327256144832084140326211787095185387184042863098039353447638354068257542431310446946647119980015138750899868037746669421568070271932413764259676956374484562485256620674017994789671722639632166573945326914937273144707579116942828829439479027021091021895617076384150795685930259899485903949417153311714008209821763677921131647753580243270966090004697414476898401245420722279025775808425311369345945333390718272537170540715732876593838880538497578151023213781786397984366643761975375499202033648193102724333377532699782779668562718422421001381212021202434202321749045767409234588439312815233841769943729897532250148416474102019534065947984811993787735022906904089110281275271350171774015269991408145207776726252244206644634968949811451866896734411962768322995391
hint = 41996570696275295395539534428940200671227188082704717649176724597069420049260267572854852514610476139876070756881699580805192526216513934223030289478838707631164636060008838496820612584382134035797244278835876185067513651339520279017540267948943735378984288056939718727602752879081892213796706962289583558427429195023427051501395363171358828393605841437442570620549857323133802286936216569021101342097068551340640993718444968662183373208944371045995629478834850707265835695658809059785571804294690517835171521030343001499450320331559412025246466988775338041034019216089182482323468462175321510807356161582680639890049197402627716513209402878774113016825619586752794499463078242662614930365296666540099992822701119318818844256099597723990940753563303470120204635013499055701070359969415075653272105469223222467835036713913033426298173384793336365666775349719499167184509691147286024071108964801046309063425465112758863901576836844440539526209475451286261033575312380062111893033532863280644910233275928661028623947838014116472209006106084296635400652668853658808473184453643809931864001529513317078105554347043358095585872920394182729110437584203198607805050491689528826562325260367512723951275689996399816372877094925769133365567930623495587844739890766185397550573894921557224170272572951145645670001749175752621172082904100012071700921929848424662888865798269937428513197884004792888614497802720407678787281201367227214864726424375551131992530471138585431420884561876169591664276675086869895351735648847463199890379152781561995875901462664584341770906509068388497543768939104041433771887584619085626186600353413326975250890538056828398174850588390816898039318868356703614218048583870109546023305729377830456010367063172604093461530798890799052383125740580557873417012215204950685804404481312421404950265389391922823063988034690
c1 = 11141767157610121479962689166587929061365123208508758833307715536345362542641617735307871700796644542964431478672237859420911202399216156704046996727692643445304994611339502120709935328263107882721458296044923171519956858878653011960039588613956918765670067956587972564162741118079829408248229006070276987793090815164768990588681146575463774870128154356006203234743742874918072304894272141605862332243694363659643399136842594632467949500209508495465785026663420069870377657116656852272538717763403414608354314743687983077839532275673181360177876526094712436410102777859174210615998220623703762319089690648647794231544661044534621387049843550258435801038406787282821635188723603483994852507333473017976463577277149347365289489165967420372696988684295050671072696463371794785853575688195046674806152516699556409317869884734236288979879198975148194245839041710270386694907342945623418081472886557725678924236103020784724506148636122256762221311860417919655618921825438869054612063992343122205556034416409935703986658355840013688893621218009844505021123794425176434346453933773223177962494886725786894816718988484470026370791055023147338010836238134172629556624977936801133914392701454813489559824977129566848319464984162437
c2 = 369736930929760297065148911584919945466794276533858081549700753121893604016699927496864932685200662366179250652803528363353932376682054013105949663114413852586389919202924132809483441495238161428233547875668104945698323121385065197782600475921041555452772144681452939590698678253925080280869994885646313802792161740051297826057978620138823712041850886786590837601368344409524490101282091782091765734920760597884213547117275271182937307943414411140862797411211812840646424968705533846088722976386853952966723471025208925257768685048556327927976153389326732091529480995211216078879182753385693835387902190157692707274
e1 = 65537
s_val =21984859824026882810575522264245671634373272865189308194353916132958485166593746886547683047932259501479684408417618543178999537712446319
#第一步：求解temp 
def find_temp():
    """通过近似求解和小范围遍历找到满足方程的temp值"""
    temp_approx = gmpy2.iroot(s_val // 8, 3)[0]  # 近似解
    # 在近似解附近小范围遍历
    for t in range(int(temp_approx) - 1000, int(temp_approx) + 1000):
        t_val = gmpy2.mpz(t)
        # 计算方程左边值
        equation_val = 8*t_val**3 + 27*t_val**2 + 2004*t_val
        if equation_val == s_val:
            return t_val
    return None

temp = find_temp()
if temp is None:
    raise ValueError("无法找到满足方程的temp值")

print(f"[+] 找到temp值: {temp}")
#第二步：分解n1
def factorize_n1():
    # 计算k的估计值(仅是一个估计)
    k_approx = (e1 * hint) // n1
    print(f"[*] k的估计值: {k_approx}")

    # 在估计值附近搜索
    for k in range(k_approx - 100000, k_approx + 100000):
        if k <= 0:
            continue       
        # 建立二次方程: x^2 + b*x + c = 0
        # 其中x = p1
        a=k-1
        b = hint*e1+temp-k*n1-k
        c = k*n1
        
        # 计算判别式
        discriminant = b**2 - 4*a*c
        if discriminant < 0:
            continue
        
        # 检查是否为完全平方数
        sqrt_disc = gmpy2.isqrt(discriminant)
        if sqrt_disc * sqrt_disc != discriminant:
            continue
        
        # 计算可能的p1值
        for sign in [1, -1]:
            p1_candidate = (-b + sign * sqrt_disc) // 2
            
            # 检查候选p1是否有效
            if p1_candidate <= 1:
                continue
            if n1 % p1_candidate != 0:
                continue        
            q1_candidate = n1 // p1_candidate
            
            # 简单检查是否为素数
            if gmpy2.is_prime(p1_candidate) and gmpy2.is_prime(q1_candidate):
                print(f"[+] 找到k值: {k}")
                return p1_candidate, q1_candidate 
    # 如果没找到，尝试另一种方法,从n1的平方根附近开始找因数
    sqrt_n = gmpy2.isqrt(n1)
    for i in range(1, 100000000):
        for direction in [1, -1]:
            p1_candidate = sqrt_n + direction * i
            if p1_candidate <= 1:
                continue
            if n1 % p1_candidate == 0:
                q1_candidate = n1 // p1_candidate
                if gmpy2.is_prime(p1_candidate) and gmpy2.is_prime(q1_candidate):
                    return p1_candidate, q1_candidate
    return None, None

p1, q1 = factorize_n1()
if p1 is None:
    raise ValueError("无法分解n1")

print(f"[+] 找到p1: {p1}")
print(f"[+] 找到q1: {q1}")

# 计算私钥d1
phi1 = (p1 - 1) * (q1 - 1)
d1 = gmpy2.invert(e1, phi1)

# 解密密文
flag1_int = pow(c1, d1, n1)
flag1 = long_to_bytes(flag1_int)

print(f"[+] 解密得到flag: {flag1}")